set t_RV=
syntax on
set number
set enc=utf-8
set ts=4
set sw=4
set sta
set smartindent
set et
set smartcase
set hlsearch
set ff=unix
set ffs=unix
set nobk
set nowb
set noswf
set list
set listchars=eol:$,tab:->,trail:·,extends:>,precedes:<,nbsp:·
set t_Co=16
colorscheme dhln
set wildmode=longest,list
set wildmenu
set nocompatible
filetype plugin on
set background=dark
set relativenumber
set cursorline
set path+=**
map <Return> i<Return><Esc>^

"BEGIN OpenAI config
let initial_prompt =<< trim END
>>> system

You are going to play a role of a completion engine with following parameters:
Task: Provide compact code/text completion, generation, transformation or explanation
Topic: general programming and text editing
Style: Plain result without any commentary, unless commentary is necessary. Do not include symbols such as ``` or ```python.
Audience: Users of text editor and programmers that need to transform/generate text
END

let chat_engine_config = {
\  "engine": "chat",
\  "options": {
\    "model": "gpt-4o",
\    "endpoint_url": "https://api.openai.com/v1/chat/completions",
\    "max_tokens": 0,
\    "temperature": 0.1,
\    "request_timeout": 20,
\    "selection_boundary": "",
\    "initial_prompt": initial_prompt,
\  },
\}

let g:vim_ai_complete = chat_engine_config
let g:vim_ai_edit = chat_engine_config
let g:vim_ai_roles_config_file = '~/.vim/roles.ini'

" custom command suggesting git commit message, takes no arguments
function! GitCommitMessageFn()
  let l:diff = system('git --no-pager diff --staged')
  let l:prompt = "generate a short commit message from the diff below:\n" . l:diff
  let l:config = {
  \  "engine": "chat",
  \  "options": {
  \    "model": "gpt-4o",
  \    "initial_prompt": ">>> system\nyou are a code assistant",
  \    "temperature": 1,
  \  },
  \}
  call vim_ai#AIRun(l:config, l:prompt)
endfunction
command! GitCommitMessage call GitCommitMessageFn()

" END OpenAI config

" BEGIN Copilot
imap <C-L> <Plug>(copilot-accept-word)
imap <C-J> <Plug>(copilot-accept-line)
imap <C-H> <Plug>(copilot-dismiss)
set backspace=indent,eol,start
" END Copilot

nnoremap <leader>% :let @+=@%<CR>

if filereadable($HOME . "/.vim/localrc.vim")
    source $HOME/.vim/localrc.vim
endif
cabbrev E Explore

function! AlignEqualsRange() range
    let lineStart   = line("'<")
    let lineEnd     = line("'>")
    let equalsCol   = 0

    for i in range(lineStart, lineEnd)
        let col = stridx(getline(i), "=")
        if col > equalsCol
            let equalsCol = col
        endif
    endfor

    if &tabstop > 0
        let equalsCol += (&tabstop - (equalsCol % &tabstop)) % &tabstop
    endif

    for i in range(lineStart, lineEnd)
        let lineString      = getline(i)
        let col             = stridx(lineString, "=")
        let spaces          = equalsCol - col
        let lineStringEnd   = strpart(lineString, col)
        let lineString      = strpart(lineString, 0, col)
        let j               = 0
        while j < spaces
            let lineString .= " "
            let j += 1
        endwhile
        let lineString .= lineStringEnd
        call setline(i, lineString)
    endfor
endfunction


function! PipeAndRestore(cmd)
     " Try to execute the shell command
    execute '%!'.a:cmd
    if v:shell_error
        undo
    endif
endfunction

vnoremap <Leader>l :call AlignEqualsRange()<CR>
nnoremap <Leader>f mkHmt:call PipeAndRestore('elm-format --stdin')<CR>'tzt'k
nnoremap <Leader>e :w<CR> :!clear; elm make --output /dev/null %<CR>
vnoremap <Leader>f :!elm-format --stdin<CR>
vnoremap <Leader>c :!ctags src -R<CR>
nnoremap <Leader>s :-1read $HOME/.vim/snippets/<C-R>=expand('%:e')<CR>/

autocmd BufNewFile *.elm :call NewElmModule()

function! NewElmModule()
    let fileName = expand('%:r')
    let parts = reverse(split(fileName, "/"))
    let moduleName = []

    for p in parts
        if (l:p !~ '^[A-Z]')
            break
        endif
        let moduleName = add(moduleName, p)
    endfor


    let moduleName = join(reverse(moduleName), ".")
    let moduleName = join(["module", moduleName, "exposing (..)"], " ")

    call setline(1, moduleName)
endfunction

au BufReadPost,BufNewFile source ~/.vim/syntax/c.vim
